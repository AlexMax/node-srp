const vows = require('vows'),
      assert = require('assert'),
      bigint = require('bigint'),
      Put = require('put'),
      params = require('../lib/params'),
      srp = require('../lib/srp');

/*
 * Vectors from https://wiki.mozilla.org/Identity/AttachedServices/KeyServerProtocol
 *
 * Verify that we are inter-compatible with the SRP implementation used by
 * Mozilla's Identity-Attached Services, aka PiCl (Profile in the Cloud).
 *
 * Note that P_stretched is the HKDF-stretched key, computed elsewhere.
 */

const I = new Buffer("andré@example.org", "utf8"),
      P = new Buffer("pässwörd", "utf8"),
      P_stretch = new Buffer("5b597db713ef1c0567f8d053e9dde294f917a0a838ddb661a98a67a188bdf491", "hex");
      N = params['2048'].N,
      g = params['2048'].g,
      s = new Buffer("00f100000000000000000000000000000000000000000000000000000000009b", 'hex'),
      b = bigint("119827766042000957856349411550091527197081252269605447689936430952278002910536155503035277450562560602971778328003253459733139844872578335969641434172163891575825549320284149937367218831553428069327423189198736863575142046053414928395487318790431357183095397064892915732142348352729476798883594253343430842313006332606344714480994398088610693164826214242314090883070476916770009839296811772743420990997238759832829219109897328764288319854878234173127723999262829546938957845836323714648638545526799188280210660508721582004031026248318155961400949332162983284562611677708050444470403904739431335617585333671378812960", 10),
      a = bigint("119334647663227291363113405741243413916434827363146166012200067038894142816254113710841716638008805209543910927476491099816542561560345503311330152550056221240122563520612198703057065667637570340647063422988042473190059156975005813463818646696643573820202000369152615667401021816298491297653620614440782978764393137821956464627163145421579373439868081673415678986432326806001408975760610901250649711198896213496068605039486228645916762983047459546900860937537468108474188471985145427757080362211874088739962880012800917057512380049765406348391068882236386645531489818952050236879990719946264951520393624479315530076", 10),
      ALG = 'sha256';

/* The constants below are the expected computed SRP values given the
 * parameters specified above for I, P, N, g, b, a, and the algorithm.
 */

const I_hex = "616e6472c3a9406578616d706c652e6f7267",
      P_hex = "70c3a4737377c3b67264",
      k = bigint("2590038599070950300691544216303772122846747035652616593381637186118123578112", 10),
      x_hex = "ffd36e11f577d312892334810d55089cb96c39443c255a9d85874bb6df69a537",
      x = bigint("115713340795669212831971819661984296758573939625477265918747447380376082294071", 10),
      v = bigint("71059715947322363168818619231596014948502664753879821526306672648301269136332546839100253983803912725413731153916626297948231925131054776204301203872383833825292863403260680360596134078965569670569235971894130915251144385164054999200238790399524380121634022271328529734937174066811503227222944678351915275352511787735824142082281320032065951325711784707869987141733046865019265053926187756870781628009053137574167426864838849814321621297918109241151570638074596222682772158532484976644908876686423788254204401136102193244276625617385185761349298945899736743346225452678822123821266140913290180513540399852050747986", 10),
      v_hex = "00901a4e05a7986cfafe2c80993f6e21847d38b8b9168065149480722d008c9ac5fe418d799d03c2b1c26db2afcd45130a0601d310faa060cc728888aba130a17d855773107ecc92f31ea3a3838bc72777fc26420ed59918298583d15640b965939dd6967e943bd6ed846dbbb18885c74f6e9370e4eeecc4c8e2a648850cf2ba5baab18888b433c4b0bd8891eeffe16cc022a098284696bc3a81e735a1a2a37162f62b980879bbd403ae55548b9feeecb18bf0740f0d078a435fedb5324d630e8a14fed435fbb5ea4b6e94b8b129799d2a0991671a67be34149dc5e94a4a3d05749fc3b9e1a5328296b20a15348420bed2f28d2558cb4099f30be8a7240c9252",
      b_hex = "00f
      B_hex = "00857f70b197a6f3f79c4270a41c581d62c7ec7fc554c797481d4b4075b06be3df7f4f189e71fbec08d1bcff8c5e4f7465256cba8a78b725daa0b9bddcbbea43d916067b12c59aaf4a9cdad53e08e4a5770ea722879873022c5f5f608eb94795710a907e1b425080688d9e7790ce07816e6b2cdb9ad2c18f60a2a5feb91b6da392579c5eb1e36f425b85c34085b216b97c4a3f7ffeb887c878ce0152d8be66eb9c7a51abbae3b3f656c6e56d95d3e148a23af3e9aaa54c72cde19b58bdcbfb34b9eb7f6dcbcd86e27e6221f6d3da2517255088f5e7c408b37d6765120134b71986287225d781c49ae5436b89525e17ebdcb8f3b7eb43163acfb31c45a51a5267",
      a_hex = "00fc",
      A_hex = "00f2a357d7da71321be6c070fb3a59288cec951cb13e76451f8c466ab373626a7272dc1484c79ea3cd1ea32e57fa46652e6450aa61ac5ee7eac7a8c06c28ab195ccbe57500062c501a15fbb23a7f71b235448326af5e51c063f167378c78213793dbc54efb32f204de753d7a6b3d826daaefc007d17862af9b6a14e35f17f1eb8b13c7b8ffa1f6f47b70d62bd0c351b47596b0b0abcba95c2d731869ed6e4ec24ab90da8cb22e65d256315ee84d8079b4086d90c4e827b51bb4e4d2d7b387da02e6b48904a3ba6d7648a9bcdf3e9fc607cfba92f8eacae123ac45a79307cf3dd281ed75a96c7de8fcd823f148dcc06349795f825fb029859b963ab88320133de",
      u_hex = "610c6df1f495e4298a2a59a0f5b00d47ea2ed6ce2ccec8f7ade158314a7bd794",
      S_hex = "009cc8da2f7a95015bc0091faa36d6efff52c33b924353e11de1d8e738654d6f6a481003acb17cae2ba2d4ae3fea84314c940397640fce92d9153dffb7f3bd29cbdb49e4ff0d26c467061337fd3708514e3039d24cb54dc46420426b0daf772463fe06eb1521c7b096c4eeb6e5f9f73949dcc74bc91baab8398aff6df6735da2c9486a645a20f2d7d8f455a2bd226f21e127f23e202b21fdd4ef64dc1a6740b6fcd2a6b032fcb393a2b9d97506b6fb895585d29173cc0e89c3b3077ffa31215db602b28364f8101246ee9e8c47b63881f3f867e67971825df6a881d1142989abcd4abba9c27ae529c31be53f69966ccb81f7660f95d5f8fc45d052df3bcbb761",
      M1_hex = "182ff26523922c52559cab3cdfc89a74c986b1d7504ea53d11d9a204fc54449d",
      K_hex = "78a36d3e0df089e729a98dee3290fc4964cd6ec96b771d6abb6efe9181be868b";

function pad(s, margin) {
  margin = margin || 256;
  // We consistently zero-pad all string values to 256 bytes (2048 bits)
  
  var padding = margin - (s.length % margin)
  var prefix = "";
  while (padding-- > 0) {
    prefix += "0";
  }
  return prefix + s; 
};

vows.describe('picl vectors')

.addBatch({
  'test vectors': {
    'I encoding': function() {
      assert(I.toString('hex') == I_hex);
    },

    'P encoding': function() {
      assert(P.toString('hex') == P_hex);
    },

    'k': function() {
      assert(k.eq(srp.getk(N, g, ALG)));
    },

    'x': function() {
      assert(x.toString(16) == x_hex);
      assert(srp.getx(s, I, P_stretch, ALG).eq(x));
    },

    'v': function() {
      assert(pad(v.toString(16)) == v_hex);
      assert(srp.getv(s, I, P_stretch, N, g, ALG).eq(v));
    },

    'b': function() {
      assert(pad(b.toString(16)) == b_hex);
    },

    'a': function() {
      assert(pad(a.toString(16)) == a_hex);
    },

    'B': function() {
      var B = srp.getB(v, g, b, N, ALG);
      assert(pad(B.toString(16)) == B_hex);
    },

    'A': function() {
      var A = srp.getA(g, a, N);
      assert(pad(A.toString(16)) == A_hex);
    },

    'u': function() {
      var A = bigint(A_hex, 16);
      var B = bigint(B_hex, 16);
      var u = srp.getu(A, B, N, ALG);
      assert(u.toString(16) == u_hex);
    },

    'secrets': {
      'client': {
        topic: function() {
          var B = bigint(B_hex, 16);
          return srp.client_getS(s, I, P_stretch, N, g, a, B, ALG);
        },

        'S': function(S) {
          assert(pad(S.toString(16)) == S_hex);
        },

        'K': function(S) {
          assert(srp.getK(S, ALG).toString(16) == K_hex);
        }
        
      },

      'server': {
        topic: function() {
          var A = bigint(A_hex, 16);
          return srp.server_getS(s, v, N, g, A, b, ALG);
        },

        'S': function(S) {
          assert(pad(S.toString(16)) == S_hex);
        },

        'K': function(S) {
          assert(srp.getK(S, ALG).toString(16) == K_hex);
        }
      }
    }
  }
})

.export(module);
